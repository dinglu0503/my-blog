{"ast":null,"code":"var _jsxFileName = \"/Users/dinglu/Downloads/code/blog/my-blog/src/TodoItem/TodoItem.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.content !== this.props.content) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          content = _this$props.content,\n          test = _this$props.test;\n    return React.createElement(\"div\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, test, \"-\", content);\n  }\n\n  componentDidMount() {}\n\n  handleClick() {\n    const _this$props2 = this.props,\n          deleteItem = _this$props2.deleteItem,\n          index = _this$props2.index;\n    deleteItem(index);\n  }\n\n}\n\nTodoItem.propTypes = {\n  test: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  deleteItem: PropTypes.func,\n  index: PropTypes.number,\n  customProp: function (props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Validation failed.');\n    }\n  }\n};\nTodoItem.defaultProps = {\n  test: 'hello world'\n};\nexport default TodoItem;","map":{"version":3,"sources":["/Users/dinglu/Downloads/code/blog/my-blog/src/TodoItem/TodoItem.js"],"names":["React","Component","Fragment","PropTypes","TodoItem","constructor","props","handleClick","bind","shouldComponentUpdate","nextProps","nextState","content","render","test","componentDidMount","deleteItem","index","propTypes","string","isRequired","func","number","customProp","propName","componentName","Error","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAgC;AAC9BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,QAAID,SAAS,CAACE,OAAV,KAAsB,KAAKN,KAAL,CAAWM,OAArC,EAA8C;AAC5C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACkB,KAAKP,KADvB;AAAA,UACCM,OADD,eACCA,OADD;AAAA,UACUE,IADV,eACUA,IADV;AAGP,WACE;AACE,MAAA,OAAO,EAAE,KAAKP,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGO,IAHH,OAGUF,OAHV,CADF;AAOD;;AAEDG,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDR,EAAAA,WAAW,GAAG;AAAA,yBACkB,KAAKD,KADvB;AAAA,UACJU,UADI,gBACJA,UADI;AAAA,UACQC,KADR,gBACQA,KADR;AAEZD,IAAAA,UAAU,CAACC,KAAD,CAAV;AACD;;AAjC6B;;AAoChCb,QAAQ,CAACc,SAAT,GAAqB;AACnBJ,EAAAA,IAAI,EAACX,SAAS,CAACgB,MAAV,CAAiBC,UADH;AAEnBR,EAAAA,OAAO,EAAET,SAAS,CAACgB,MAFA;AAGnBH,EAAAA,UAAU,EAAEb,SAAS,CAACkB,IAHH;AAInBJ,EAAAA,KAAK,EAAEd,SAAS,CAACmB,MAJE;AAKnBC,EAAAA,UAAU,EAAE,UAASjB,KAAT,EAAgBkB,QAAhB,EAA0BC,aAA1B,EAAyC;AACnD,QAAI,CAAC,UAAUX,IAAV,CAAeR,KAAK,CAACkB,QAAD,CAApB,CAAL,EAAsC;AACpC,aAAO,IAAIE,KAAJ,CACL,mBAAmBF,QAAnB,GAA8B,eAA9B,GACA,IADA,GACOC,aADP,GACuB,uBAFlB,CAAP;AAID;AACF;AAZkB,CAArB;AAeArB,QAAQ,CAACuB,YAAT,GAAwB;AACtBb,EAAAA,IAAI,EAAC;AADiB,CAAxB;AAMA,eAAeV,QAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types'\n\nclass TodoItem extends Component{\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.content !== this.props.content) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const { content, test }= this.props ;\n\n    return (\n      <div \n        onClick={this.handleClick}\n        >\n        {test}-{content}\n      </div>\n    )\n  }\n  \n  componentDidMount() {\n    \n  }\n\n  handleClick() {\n    const { deleteItem, index } = this.props;\n    deleteItem(index);\n  }\n}\n\nTodoItem.propTypes = {\n  test:PropTypes.string.isRequired,\n  content: PropTypes.string,\n  deleteItem: PropTypes.func,\n  index: PropTypes.number,\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error (\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      )\n    }\n  }\n}\n\nTodoItem.defaultProps = {\n  test:'hello world'\n}\n\n\n\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}